<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="user">
    <!--무진 -->
    <select id="findById" resultType="user">
        select
        *
        from
        users
        where
        id = #{id}
    </select>
    <!--무진 -->
    <insert id="insertUser">
        insert into
        users
        values (
        ('user' || lpad(seq_users_no.nextval,3,0)), #{id}, #{password}, #{name}, #{nickName}, #{gender}, #{email}, #{phone}, #{role},
        #{category, typeHandler=listStringTypeHandler}, default)
    </insert>

    <select id="findAll" resultType="user">
        select
        *
        from
        users
        order by
        no
    </select>

    <select id="findByName" resultType="user">
        select
        *
        from
        users
        where
        name like '%' || #{name} || '%'
    </select>
    <select id="findByGender" resultType="user">
        select
        *
        from
        users
        where
        gender = #{gender}
    </select>
    <update id="updateUser">
        update
        users
        set
        name = #{name},
        gender = #{gender},
        email = #{email},
        phone = #{phone},
        nickname = #{nickName},
        category = #{category, typeHandler=listStringTypeHandler}
        where
        id = #{id}
    </update>

    <update id="updateUserPassword">
        update
        users
        set
        password = #{password}
        where
        id = #{id}
    </update>

    <update id="updateUserRole" >
        update
        users
        set
        role = #{role}
        where
        id = #{id}
    </update>

    <delete id="deleteUser">
        delete from
        users
        where
        id = #{id}
    </delete>
    <select id="findByNo" resultMap="userAttractionVoMap">
        select
        u.no,
        u.id,
        u.name,
        u.nickname,
        u.email,
        u.phone,
        u.category,
        a.users_no,
        a.rest_no,
        r.no restaurant_no,
        r.name restaurant_name,
        r.address restaurant_address,
        r.content,
        r.phone restaurant_phone,
        r.category restaurant_category,
        r.approval
        from
        users u join attraction a
        on u.no = a.users_no
        join restaurant r
        on a.rest_no = r.no
        where
        u.no = #{no}
    </select>
    <resultMap id="userAttractionVoMap" type="userAttractionVo">
        <id column="no" property="no"/>
        <result column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="nickname" property="nickName"/>
        <result column="email" property="email"/>
        <result column="phone" property="phone"/>
        <result column="category" property="category"/>
        <collection property="attractions" ofType="attraction">
            <id column="users_no" property="usersNo"/>
            <result column="rest_no" property="restNo"/>
        </collection>
        <collection property="restaurants" ofType="restaurant">
            <id column="restaurant_no" property="no"/>
            <result column="restaurant_name" property="name"/>
            <result column="restaurant_address" property="address"/>
            <result column="content" property="content"/>
            <result column="restaurant_phone" property="phone"/>
            <result column="restaurant_category" property="category"/>
            <result column="approval" property="approval"/>
        </collection>
    </resultMap>
</mapper>